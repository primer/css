// component id

$Layout: 'LayoutBeta' !default;
$Layout-divider-color: red !default; // var(--color-border-default)

// Layout variants

$Layout-variant-stackRegions: 'stackRegions' !default;
$Layout-variant-separateRegions: 'separateRegions' !default;
$Layout-variant-multiColumn: 'multiColumns' !default;

// Prop names

// structure
$Layout-prop-outer-spacing: 'outer-spacing' !default;
$Layout-prop-inner-spacing: 'inner-spacing' !default;
$Layout-prop-column-gap: 'column-gap' !default;
$Layout-prop-row-gap: 'row-gap' !default;

// dividers
$Layout-prop-pane-divider: 'pane-divider' !default;
$Layout-prop-header-divider: 'header-divider' !default;
$Layout-prop-footer-divider: 'footer-divider' !default;

// pane region
$Layout-prop-pane-position: 'pane-position' !default;
$Layout-prop-pane-width: 'pane-width' !default;
$Layout-prop-pane-is-sticky: 'pane-is-sticky' !default;

// content region
$Layout-prop-content-width: 'content-width' !default;

// stackRegions-specific variants
$Layout-prop-stackRegions-pane-position: 'stackRegions-pane-position' !default;

// separateRegions-specific variants
$Layout-prop-separateRegions-primary-region: 'primary' !default;

:root {
  --Layout-pane-width: #{map-get($sidebar-width, 'sm')};
  --Layout-content-width: 100%;
  // stylelint-disable-next-line primer/no-undefined-vars
  --Layout-template-columns: 1fr var(--Layout-pane-width);
  --Layout-template-areas: 'content pane';
  --Layout-column-gap: #{$spacer-3};
  --Layout-row-gap: #{$spacer-3};

  // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
  // stylelint-disable length-zero-no-unit
  --Layout-outer-spacing-x: 0px; // wrapper margin x
  --Layout-outer-spacing-y: 0px; // wrapper margin y

  --Layout-inner-spacing-min: 0px; // default region padding
  --Layout-inner-spacing-max: 0px; // relaxed content horizontal padding
  // stylelint-enable length-zero-no-unit
}

.#{$Layout} {
  // stylelint-disable-next-line primer/spacing
  margin: var(--Layout-outer-spacing-y) var(--Layout-outer-spacing-x);

  > .#{$Layout}-wrapper {
    display: grid;
    grid: auto-flow / 1fr;
    row-gap: var(--Layout-row-gap);

    > .#{$Layout}-regions {
      display: grid;
      column-gap: var(--Layout-column-gap);
      row-gap: var(--Layout-row-gap);
      grid-template-columns: var(--Layout-template-columns);
      grid-template-rows: 1fr;
      grid-template-areas: var(--Layout-template-areas);
    }
  }

  // outer spacing

  &.#{$Layout}--#{$Layout-prop-outer-spacing}-normal {
    --Layout-outer-spacing-x: #{$spacer-3}; // 16px
    --Layout-outer-spacing-y: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-outer-spacing-x: #{$spacer-4}; // 24px
      --Layout-outer-spacing-y: #{$spacer-4}; // 24px
    }
  }

  &.#{$Layout}--#{$Layout-prop-outer-spacing}-condensed {
    --Layout-outer-spacing-x: #{$spacer-3}; // 16px
    --Layout-outer-spacing-y: #{$spacer-3}; // 16px
  }

  // inner spacing

  &.#{$Layout}--#{$Layout-prop-inner-spacing}-normal {
    --Layout-inner-spacing-min: #{$spacer-3}; // 16px
    --Layout-inner-spacing-max: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-inner-spacing-max: #{$spacer-4}; // 24px
    }
  }

  &.#{$Layout}--#{$Layout-prop-inner-spacing}-condensed {
    --Layout-inner-spacing-min: #{$spacer-3}; // 16px
    --Layout-inner-spacing-max: #{$spacer-3}; // 16px
  }

  // column gap

  &.#{$Layout}--#{$Layout-prop-column-gap}-normal {
    --Layout-column-gap: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-column-gap: #{$spacer-4}; // 24px
    }
  }

  &.#{$Layout}--#{$Layout-prop-column-gap}-condensed {
    --Layout-column-gap: #{$spacer-3}; // 16px
  }

  &.#{$Layout}--#{$Layout-prop-column-gap}-none {
    // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
    // stylelint-disable-next-line length-zero-no-unit
    --Layout-column-gap: 0px;
  }

  // row gap

  &.#{$Layout}--#{$Layout-prop-row-gap}-normal {
    --Layout-row-gap: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-row-gap: #{$spacer-4}; // 24px
    }
  }

  &.#{$Layout}--#{$Layout-prop-row-gap}-none {
    // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
    // stylelint-disable length-zero-no-unit
    --Layout-row-gap: 0px;
  }

  &.#{$Layout}--#{$Layout-prop-row-gap}-condensed {
    --Layout-row-gap: #{$spacer-3}; // 16px
  }


  // Layout variants

  // Available options:
  // - Layout--variant-stackRegions
  // - Layout--variant-separateRegions
  // - Layout--variant-md-multiColumns
  // - Layout--variant-lg-multiColumns

  // variant: stackRegions

  &.#{$Layout}--variant-stackRegions {

    &.#{$Layout}--variant-md-multiColumns {
      @include Layout-stackRegions(md);
    }

    &.#{$Layout}--variant-lg-multiColumns {
      @include Layout-stackRegions(lg);
    }
  }

  // variant: separateRegions

  &.#{$Layout}--variant-separateRegions {

    &.#{$Layout}--variant-md-multiColumns {
      @include Layout-separateRegions(md);
    }

    &.#{$Layout}--variant-lg-multiColumns {
      @include Layout-separateRegions(lg);
    }
  }

  // variant: multiColumns (desktop version)

  &.#{$Layout}--variant-md-multiColumns {
    @include breakpoint(md) {
      @include Layout-multiColumn;
    }
  }
  
  &.#{$Layout}--variant-lg-multiColumns {
    @include breakpoint(lg) {
      @include Layout-multiColumn;
    }
  }

  // content width

  [class^="#{$Layout}-content-centered-"] {
    max-width: calc(var(--Layout-content-width) + var(--Layout-pane-width) + var(--Layout-column-gap));
    margin-right: auto;
    margin-left: auto;
  }

  &.#{$Layout}--#{$Layout-prop-pane-divider} {
    [class^="#{$Layout}-content-centered-"] {
      max-width: calc(var(--Layout-content-width) + var(--Layout-pane-width) + (var(--Layout-column-gap) * 2));
    }
  }

  &.#{$Layout}--#{$Layout-prop-pane-position}-start {
    [class^="#{$Layout}-content-centered-"] > [class^='container-'] {
      margin-left: 0;
    }
  }

  &.#{$Layout}--#{$Layout-prop-pane-position}-end {
    [class^="#{$Layout}-content-centered-"] > [class^='container-'] {
      margin-right: 0;
    }
  }

  @each $breakpoint in map-keys($breakpoints) {
    .#{$Layout}-content-centered-#{$breakpoint} {
      --Layout-content-width: #{map-get($breakpoints, $breakpoint)};
    }
  }

  // pane width

  @each $breakpoint in map-keys($sidebar-width) {
    @include breakpoint($breakpoint) {
      --Layout-pane-width: #{map-get($sidebar-width, $breakpoint)};
    }
  }

  &.#{$Layout}--#{$Layout-prop-pane-width}-narrow {
    @each $breakpoint in map-keys($sidebar-narrow-width) {
      @include breakpoint($breakpoint) {
        --Layout-pane-width: #{map-get($sidebar-narrow-width, $breakpoint)};
      }
    }
  }

  &.#{$Layout}--#{$Layout-prop-pane-width}-wide {
    @each $breakpoint in map-keys($sidebar-wide-width) {
      @include breakpoint($breakpoint) {
        --Layout-pane-width: #{map-get($sidebar-wide-width, $breakpoint)};
      }
    }
  }

  // Responsive divider

  // &.#{$Layout}:not(.#{$Layout}--#{$Layout-prop-flow-horizontal}) {
    
    /*
    .#{$Layout}-region--line-divider {
      position: relative;
      padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
      border-bottom: 1px solid transparent;

      &:after {
        content: "";
        display: block;
        position: absolute;
        background-color: var(--color-canvas-inset);
        background-color: red;
        width: calc(100% + (var(--Layout-outer-spacing-x) * 2));
        height: 1px;
        left: calc(var(--Layout-outer-spacing-x) * -1);
        bottom: -1px;
      }
    }

    .#{$Layout}-region--shallow-divider {
      position: relative;
      padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
      margin-bottom: #{$spacer-2}; // 8px

      &:after {
        content: "";
        display: block;
        position: absolute;
        left: calc(var(--Layout-outer-spacing-x) * -1);
        bottom: calc(#{$spacer-2} * -1); // -8px
        width: calc(100% + (var(--Layout-outer-spacing-x) * 2));
        height: #{$spacer-2}; // 8px
        background-color: var(--color-canvas-inset);
        box-shadow: inset 0 1px $Layout-divider-color, inset 0 -1px $Layout-divider-color;
      }
    }
    */
  // }

  // regions

  .#{$Layout}-header, .#{$Layout}-content, .#{$Layout}-pane, .#{$Layout}-footer {
    // stylelint-disable-next-line primer/spacing
    padding: var(--Layout-inner-spacing-min);
  }
  
  .#{$Layout}-header {
    background: lightpink;
  }

  .#{$Layout}-content {
    // stylelint-disable primer/spacing
    padding-left: var(--Layout-inner-spacing-max);
    padding-right: var(--Layout-inner-spacing-max);
    // stylelint-enable primer/spacing
    grid-area: content;
    background: rgb(255, 197, 253);
  }

  .#{$Layout}-pane {
    grid-area: pane;
    background: rgb(215, 255, 233);
  }

  .#{$Layout}-footer {
    background: lightyellow;
  }

}

// Layout dividers

// an <hr> horizontal line to be loosely used anywhere. Accompanied by
// ` divider-md-none` or ` divider-lg-none`, or `divider-divider-md-line` or
// `divider-divider-lg-line` for the filled line to be rendered as a thin line
// on larger viewports.

/*
.#{$Layout}-divider-line {

}
.#{$Layout}-divider-filled {

}

.#{$Layout}--divider-line-before {
  position: relative;
  padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
  border-bottom: 1px solid transparent;

  &:before {
    @include Layout-line-divider;
  } 
}
.#{$Layout}--divider-line-after {
  border-bottom: 10px solid orange;
}

.#{$Layout}--divider-filled-before {
  border-top: 20px solid purple;
}
.#{$Layout}--divider-filled-after {
  border-bottom: 20px solid orange;
}

.#{$Layout}--variant-md-multiColumns {
  @include breakpoint(md) {
    .#{$Layout}-region--line-divider {
      &:after {
        display: none;
      }
    }
  }
}

// FIXME -- this doesn't need to be CSS utilities. can use same approach with mixins I've used for responsive behaviors

.#{$Layout}--divider-md-none {
  @include breakpoint(md) {
    border-top: 0;
    border-bottom: 0;
  }
}

.#{$Layout}--divider-lg-none {
  @include breakpoint(lg) {
    border-top: 0;
    border-bottom: 0;
  }
}

.#{$Layout}-divider-md-line-before { }
.#{$Layout}-divider-md-line-after { }

*/


// pane responsive divider FIXME

.#{$Layout}--divider-line-before {
  position: relative;
  padding-top: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
  border-top: 1px solid transparent;

  &:before {
    @include Layout-line-divider;
    top: -1px;
  } 
}

.#{$Layout}--divider-line-after {
  position: relative;
  padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
  border-bottom: 1px solid transparent;

  &:after {
    @include Layout-line-divider;
    bottom: -1px;
  } 
}

.#{$Layout}--divider-filled-before {
  position: relative;
  padding-top: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
  margin-top: #{$spacer-2}; // 8px

  &:after {
    @include Layout-filled-divider;
    top: $spacer-2 * -1; // -8px
  }
}

.#{$Layout}--divider-filled-after {
  position: relative;
  padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
  margin-bottom: #{$spacer-2}; // 8px

  &:before {
    @include Layout-filled-divider;
    bottom: $spacer-2 * -1; // -8px
  }
}