// component id

$Layout-divider-color: red !default; // var(--color-border-default)
$Layout-responsive-variant-max-breakpoint: 'md' !default;

:root {
  --Layout-pane-width: #{map-get($sidebar-width, 'sm')};
  --Layout-content-width: 100%;
  // stylelint-disable-next-line primer/no-undefined-vars
  --Layout-template-columns: 1fr var(--Layout-pane-width);
  --Layout-template-areas: 'content pane';
  --Layout-column-gap: #{$spacer-3};
  --Layout-row-gap: #{$spacer-3};

  // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
  // stylelint-disable length-zero-no-unit
  --Layout-outer-spacing-x: 0px; // wrapper margin x
  --Layout-outer-spacing-y: 0px; // wrapper margin y

  --Layout-inner-spacing-min: 0px; // default region padding
  --Layout-inner-spacing-max: 0px; // relaxed content horizontal padding
  // stylelint-enable length-zero-no-unit
}

.PageLayout {
  // stylelint-disable-next-line primer/spacing
  margin: var(--Layout-outer-spacing-y) var(--Layout-outer-spacing-x);

  > .PageLayout-wrapper {
    display: grid;
    grid: auto-flow / 1fr;
    row-gap: var(--Layout-row-gap);

    > .PageLayout-columns {
      display: grid;
      column-gap: var(--Layout-column-gap);
      row-gap: var(--Layout-row-gap);
      grid-template-columns: var(--Layout-template-columns);
      grid-template-rows: 1fr;
      grid-template-areas: var(--Layout-template-areas);
    }
  }

  // outer spacing

  &.PageLayout--outerSpacing-normal {
    --Layout-outer-spacing-x: #{$spacer-3}; // 16px
    --Layout-outer-spacing-y: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-outer-spacing-x: #{$spacer-4}; // 24px
      --Layout-outer-spacing-y: #{$spacer-4}; // 24px
    }
  }

  &.PageLayout--outerSpacing-condensed {
    --Layout-outer-spacing-x: #{$spacer-3}; // 16px
    --Layout-outer-spacing-y: #{$spacer-3}; // 16px
  }

  // inner spacing

  &.PageLayout--innerSpacing-normal {
    --Layout-inner-spacing-min: #{$spacer-3}; // 16px
    --Layout-inner-spacing-max: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-inner-spacing-max: #{$spacer-4}; // 24px
    }
  }

  &.PageLayout--innerSpacing-condensed {
    --Layout-inner-spacing-min: #{$spacer-3}; // 16px
    --Layout-inner-spacing-max: #{$spacer-3}; // 16px
  }

  // column gap

  &.PageLayout--columnGap-normal {
    --Layout-column-gap: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-column-gap: #{$spacer-4}; // 24px
    }
  }

  &.PageLayout--columnGap-condensed {
    --Layout-column-gap: #{$spacer-3}; // 16px
  }

  &.PageLayout--columnGap-none {
    // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
    // stylelint-disable-next-line length-zero-no-unit
    --Layout-column-gap: 0px;
  }

  // row gap

  &.PageLayout--rowGap-normal {
    --Layout-row-gap: #{$spacer-3}; // 16px

    @include breakpoint(lg) {
      --Layout-row-gap: #{$spacer-4}; // 24px
    }
  }

  &.PageLayout--rowGap-none {
    // the `px` unit is mandatory for `calc()` execution. See https://stackoverflow.com/a/32518348
    // stylelint-disable length-zero-no-unit
    --Layout-row-gap: 0px;
  }

  &.PageLayout--rowGap-condensed {
    --Layout-row-gap: #{$spacer-3}; // 16px
  }

  // regions

  .PageLayout-header,
  .PageLayout-content,
  .PageLayout-pane,
  .PageLayout-footer {
    // stylelint-disable-next-line primer/spacing
    padding: var(--Layout-inner-spacing-min);
  }

  .PageLayout-header {
    background: lightpink;
  }

  .PageLayout-content {
    // stylelint-disable primer/spacing
    padding-left: var(--Layout-inner-spacing-max);
    padding-right: var(--Layout-inner-spacing-max);
    // stylelint-enable primer/spacing
    grid-area: content;
    background: rgb(255, 197, 253);
  }

  .PageLayout-pane {
    grid-area: pane;
    background: rgb(215, 255, 233);
  }

  .PageLayout-footer {
    background: lightyellow;
  }

  // multi-column desktop-friendly layout

  @include breakpoint($Layout-responsive-variant-max-breakpoint) {

    // Set a `content` region width, to work with loading states when
    // `pane` is not yet loaded. See https://github.com/primer/css/pull/1818
    $Layout-content-full-width: minmax(0, calc(100% - var(--Layout-pane-width) - var(--Layout-column-gap)));

    &.PageLayout--panePos-start {
      --Layout-template-columns: var(--Layout-pane-width) #{$Layout-content-full-width};
      --Layout-template-areas: 'pane content';
    }

    &.PageLayout--panePos-end {
      --Layout-template-columns: #{$Layout-content-full-width} var(--Layout-pane-width);
      --Layout-template-areas: 'content pane';
    }

    // header divider

    &.PageLayout--hasHeaderDivider {
      .PageLayout-header {
        padding-bottom: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
        border-bottom: 1px solid $Layout-divider-color;
      }
    }

    // footer divider

    &.PageLayout--hasFooterDivider {
      .PageLayout-footer {
        padding-top: max(var(--Layout-row-gap), var(--Layout-inner-spacing-min));
        border-top: 1px solid $Layout-divider-color;
      }
    }

    // pane divider

    &.PageLayout--hasPaneDivider {
      &.PageLayout--panePos-start {
        .PageLayout-pane {
          border-right: 1px solid $Layout-divider-color;
        }

        &:not(.PageLayout--columnGap-none) {
          .PageLayout-pane {
            padding-right: calc(var(--Layout-column-gap) - 1px);
            margin-right: calc(var(--Layout-column-gap) * -1);
          }
          .PageLayout-content {
            margin-left: var(--Layout-column-gap);
          }
        }
      }

      &.PageLayout--panePos-end {
        .PageLayout-pane {
          border-left: 1px solid $Layout-divider-color;
        }

        &:not(.PageLayout--columnGap-none) {
          .PageLayout-pane {
            margin-left: calc(var(--Layout-column-gap) * -1);
            padding-left: calc(var(--Layout-column-gap) - 1px); 
          }
          .PageLayout-content {
            margin-right: var(--Layout-column-gap);
          }
        }
      }
    }

    // sticky pane

    &.PageLayout--isPaneSticky {
      .PageLayout-pane {
        position: sticky;
        top: 0;
        max-height: 100vh;
        overflow: auto;
      }
    }

    // content width

    [class^="PageLayout-content-centered-"] {
      max-width: calc(var(--Layout-content-width) + var(--Layout-pane-width) + var(--Layout-column-gap));
      margin-right: auto;
      margin-left: auto;
    }

    &.PageLayout--hasPaneDivider {
      [class^="PageLayout-content-centered-"] {
        max-width: calc(var(--Layout-content-width) + var(--Layout-pane-width) + (var(--Layout-column-gap) * 2));
      }
    }

    &.PageLayout--panePos-start {
      [class^="PageLayout-content-centered-"] > [class^='container-'] {
        margin-left: 0;
      }
    }

    &.PageLayout--panePos-end {
      [class^="PageLayout-content-centered-"] > [class^='container-'] {
        margin-right: 0;
      }
    }

    @each $breakpoint in map-keys($breakpoints) {
      .PageLayout-content-centered-#{$breakpoint} {
        --Layout-content-width: #{map-get($breakpoints, $breakpoint)};
      }
    }

    // pane width

    @each $breakpoint in map-keys($sidebar-width) {
      @include breakpoint($breakpoint) {
        --Layout-pane-width: #{map-get($sidebar-width, $breakpoint)};
      }
    }

    &.PageLayout--paneWidth-narrow {
      @each $breakpoint in map-keys($sidebar-narrow-width) {
        @include breakpoint($breakpoint) {
          --Layout-pane-width: #{map-get($sidebar-narrow-width, $breakpoint)};
        }
      }
    }

    &.PageLayout--paneWidth-wide {
      @each $breakpoint in map-keys($sidebar-wide-width) {
        @include breakpoint($breakpoint) {
          --Layout-pane-width: #{map-get($sidebar-wide-width, $breakpoint)};
        }
      }
    }
  }

  // responsive variants

  @media (max-width: #{map-get($breakpoints, $Layout-responsive-variant-max-breakpoint) - 0.02px}) {

    // variant: stackRegions

    &.PageLayout--variant-stackRegions {
      --Layout-template-columns: 1fr;

      // responsive-panePos: end (default)
      --Layout-template-areas: 'content' 'pane';

      // responsive-panePos: start
      &.PageLayout--variant-stackRegions-panePos-start {
        --Layout-template-areas: 'pane' 'content';
      }
    }

    // variant: separateRegions

    &.PageLayout--variant-separateRegions {
      --Layout-template-columns: 1fr;
      --Layout-template-areas: 'content';

      &.PageLayout--variant-separateRegions-primary-content {
        --Layout-template-areas: 'content';
        .PageLayout-pane {
          display: none;
        }
      }

      &.PageLayout--variant-separateRegions-primary-pane {
        --Layout-template-areas: 'pane';
        .PageLayout-content {
          display: none;
        }
      }
    }

    // region dividers for responsive variants

    .PageLayout-region--hasDivider-line-before {
      position: relative;
      margin-top: var(--Layout-row-gap);
    
      &:before {
        @include Layout-line-divider;
        top: calc(-1px - var(--Layout-row-gap));
      }
    }

    .PageLayout-region--hasDivider-line-after {
      position: relative;
      margin-bottom: var(--Layout-row-gap);
    
      &:after {
        @include Layout-line-divider;
        bottom: calc(-1px - var(--Layout-row-gap));
      } 
    }

    .PageLayout-region--hasDivider-filled-before {
      position: relative;
      margin-top: calc(#{$spacer-2} + var(--Layout-row-gap));
    
      &:after {
        @include Layout-filled-divider;
        top: calc(#{$spacer-2 * -1} - var(--Layout-row-gap));
      }
    }

    .PageLayout-region--hasDivider-filled-after {
      position: relative;
      margin-bottom: calc(#{$spacer-2} + var(--Layout-row-gap));

      &:before {
        @include Layout-filled-divider;
        bottom: calc(#{$spacer-2 * -1} - var(--Layout-row-gap));
      }
    }
  }
}