// positioning for leading/trailing items
.TextInputWrap {
  position: relative;
  display: grid;

  .TextInput-leadingVisualWrap {
    position: absolute;
    top: var(--base-size-8, 8px);
    left: var(--base-size-8, 8px);
    display: block;
    width: var(--base-size-16, 16px);
    height: var(--base-size-16, 16px);
    color: var(--color-fg-muted);
    pointer-events: none;

    // octicon
    .TextInput-leadingVisual {
      display: block;
      user-select: none;
    }
  }

  // TODO: replace with new Button component
  .TextInput-trailingAction {
    position: absolute;
    top: var(--base-size-4, 4px);
    right: var(--base-size-4, 4px);
    z-index: 4;
    display: grid;
    width: var(--primer-control-xsmall-size, 24px);
    height: var(--primer-control-xsmall-size, 24px);
    padding: 0;
    color: var(--color-fg-muted);
    cursor: pointer;
    background: transparent;
    border: 0;
    border-radius: var(--primer-borderRadius-small);
    transition: 0.2s cubic-bezier(0.3, 0, 0.5, 1);
    transition-property: color, background-color, border-color;
    align-items: center;
    justify-content: center;

    svg {
      user-select: none;
    }

    &[disabled] {
      color: var(--color-primer-fg-disabled);
      pointer-events: none;
    }

    &:hover {
      background: var(--color-action-list-item-default-hover-bg);
    }

    &:active {
      background: var(--color-action-list-item-default-active-bg);
    }

    // show vertical divider line between field and button
    &::before {
      position: absolute;
      top: calc((var(--primer-control-xsmall-size) - var(--base-size-16)) / 2);
      left: calc(var(--base-size-4, 4px) * -1);
      display: block;
      width: var(--primer-borderWidth-thin);
      height: var(--base-size-16);
      content: '';
      background: var(--color-border-default);
    }

    &::after {
      @include minTouchTarget(var(--primer-control-medium-size), var(--primer-control-medium-size));

      @media (pointer: coarse) {
        min-width: var(--primer-control-minTarget-coarse);
        min-height: var(--primer-control-minTarget-coarse);
      }
    }
  }

  // if leadingVisual is present
  &.TextInputWrap--leadingVisual {
    .TextInput {
      padding-inline-start: calc(
        var(--primer-control-medium-paddingInline-condensed, 8px) + var(--base-size-16, 16px) +
          var(--primer-control-medium-gap, 8px) - var(--primer-borderWidth-thin, 1px)
      );
    }
  }

  // if trailingAction is present
  &.TextInputWrap--trailingAction {
    .TextInput {
      padding-inline-end: calc(
        var(--primer-control-medium-paddingInline-condensed, 8px) + var(--base-size-16, 16px) +
          var(--primer-control-medium-gap, 8px) - var(--primer-borderWidth-thin, 1px)
      );
    }
  }

  .TextInput {
    @include Field();
    @include Field--input_select_textarea();

    &.TextInput--small {
      @include Field--small();
    }

    &.TextInput--medium {
      @include Field--medium();
    }

    &.TextInput--large {
      @include Field--large();
    }

    &.TextInput--inset {
      @include Field--inset();
    }

    &.TextInput--monospace {
      @include Field--monospace();
    }
  }

  // size modifications can be refactored with :has() - Field-wrap:has(.Field--large)
  // sizes
  &.TextInput--small {
    .TextInput-leadingVisualWrap {
      top: calc(var(--primer-control-medium-paddingInline-condensed, 8px) - 0.125rem); /* 6px */
      left: calc(var(--primer-control-medium-paddingInline-condensed, 8px) - 0.125rem); /* 6px */
    }

    &.TextInput-trailingAction {
      .TextInput.TextInput--small {
        padding-inline-end: calc(
          var(----primer-control-small-paddingInline-condensed, 8px) + var(--base-size-16, 16px) +
            var(--primer-control-small-gap, 8px) - var(--primer-borderWidth-thin, 1px)
        ); /* 27px */
      }
    }

    .TextInput-trailingAction {
      width: calc(var(--primer-control-small-size, 28px) - var(--base-size-8, 8px));
      height: calc(var(--primer-control-small-size, 28px) - var(--base-size-8, 8px));

      &::before {
        top: calc((var(--primer-control-xsmall-size) - var(--base-size-16)) / 4); /* 2px */
      }
    }
  }

  &.TextInput--large {
    .TextInput-leadingVisualWrap {
      top: var(--primer-control-medium-paddingInline-normal, 12px);
      left: var(--primer-control-medium-paddingInline-normal, 12px);
    }

    &.TextInput-leadingVisual {
      .TextInput.TextInput--large {
        padding-inline-start: calc(
          var(--primer-control-large-paddingInline-normal, 12px) + var(--base-size-16, 16px) +
            var(--primer-control-large-gap, 8px) - var(--primer-borderWidth-thin, 1px)
        ); /* 31px */
      }
    }

    &.TextInput-trailingAction {
      .TextInput.TextInput--large {
        padding-inline-end: calc(
          var(--primer-control-large-paddingInline-normal, 12px) + var(--base-size-16, 16px) +
            var(--primer-control-large-gap, 8px)
        ); /* 36px */
      }
    }

    .TextInput-trailingAction {
      top: calc(var(--primer-control-medium-paddingInline-condensed, 8px) - 0.125rem); /* 6px */
      right: calc(var(--primer-control-medium-paddingInline-condensed, 8px) - 0.125rem); /* 6px */
      width: var(--primer-control-small-size, 28px);
      height: var(--primer-control-small-size, 28px);

      &::before {
        top: unset;
        height: var(--base-size-20);
      }
    }
  }
}
