#!/usr/bin/env node
const globby = require('globby')
const cssstats = require('cssstats')
const postcss = require('postcss')
const loadConfig = require('postcss-load-config')
const {remove, mkdirp, readFile, writeFile} = require('fs-extra')
const {dirname, basename, join} = require('path')
const {promisify} = require('util')

const inDir = 'src'
const outDir = 'dist'
const statsDir = join(outDir, 'stats')

remove(outDir)
  .then(() => mkdirp(statsDir))
  .then(() => globby([`${inDir}/**/index.scss`]))
  .then(files => {
    return loadConfig().then(({plugins, options}) => {
      const processor = postcss(plugins)

      const inPattern = new RegExp(`^${inDir}/`)
      const names = {
        'index.scss': 'primer'
      }
      const tasks = files.map(file => {
        const path = file.replace(inPattern, '')
        const name = names[path] || dirname(path).replace(/\//g, '-')

        const dest = join(outDir, `${name}.css`)
        const opts = Object.assign({from: file, to: dest}, options)

        return readFile(file)
          .then(scss => processor.process(scss, opts))
          .then(result => Promise.all([
            writeFile(dest, result.css, 'utf8'),
            writeFile(join(statsDir, `${name}.json`), JSON.stringify(cssstats(result.css)), 'utf8'),
            writeFile(join(outDir, `${name}.js`), `module.exports = {cssstats: require('./stats/${name}.json')}`, 'utf8'),
            result.map ? writeFile(`${dest}.map`, result.map, 'utf8') : null
          ]))
      })

      return Promise.all(tasks)
    })
  })
  .catch(error => {
    console.error(error)
    process.exitCode = 1
  })
