{"expireTime":9007200815030641000,"key":"gatsby-mdx-entire-payload-3191b6e732c27466caa6b1283129bbe9-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Utilities provide the building blocks for layout and handle a range common use cases that help us avoid writing custom styles. When we need to add some margin or padding, rather than adding a new selector specific to that use case, we can use utilities. This helps us reduce the number of unique property-value pairs, and helps us keep more consistent styles across the site.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":376,"offset":376},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":376,"offset":376},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Utilities should do one job well and one job only, are immutable, and on occasion are an acceptable approach to overriding component styles.","position":{"start":{"line":4,"column":3,"offset":380},"end":{"line":4,"column":143,"offset":520},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":380},"end":{"line":4,"column":143,"offset":520},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":378},"end":{"line":4,"column":143,"offset":520},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Utility class-names should be transparent and clearly describe the job they do.","position":{"start":{"line":5,"column":3,"offset":523},"end":{"line":5,"column":82,"offset":602},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":523},"end":{"line":5,"column":82,"offset":602},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":521},"end":{"line":5,"column":82,"offset":602},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":378},"end":{"line":5,"column":82,"offset":602},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Utilities\",\"path\":\"utilities/index\"}","position":{"start":{"line":8,"column":1,"offset":605},"end":{"line":8,"column":75,"offset":679},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":8,"column":75,"offset":679}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Utilities\",\"path\":\"utilities/index\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Utilities provide the building blocks for layout and handle a range common use cases that help us avoid writing custom styles. When we need to add some margin or padding, rather than adding a new selector specific to that use case, we can use utilities. This helps us reduce the number of unique property-value pairs, and helps us keep more consistent styles across the site.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Utilities should do one job well and one job only, are immutable, and on occasion are an acceptable approach to overriding component styles.`}</li>\n      <li parentName=\"ul\">{`Utility class-names should be transparent and clearly describe the job they do.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;"}}